{
	"info": {
		"_postman_id": "e39d66ec-18ea-4a61-b8fa-3c19f5650981",
		"name": "Remoteit_Prod",
		"description": "remote.it is powered by a robust set of APIs that allow you to do anything via an API that you can do with our web portal, desktop or mobile applications.\n\n## Authentication\n\nRequest signing is done for each request independently and is sensitive to clock drift based on the system time of the machine making the API call.\n\nBest practice is to use **UTC or GMT** when using the signature methods to avoid ambiguous time zones when dates are generated by your code.\n\nTo authenticate an API request, the client must generate a signature using the previously created key and secret.\n\nThe GraphQL API requires authentication for requests. Remote.It authentication uses HTTP Request Signature. The advantages of this method are:\n\n- Keys do not expire\n    \n- Keys can be disabled and revoked (deleted) by the user at any time\n    \n- Keys are not dependent on password\n    \n- Keys are more secure (the secret is never transmitted because the request is signed)\n    \n\n## Key Management\n\nYou can generate, enable, disable and delete keys in the Account section of the web portal here [https://app.remote.it/#/account/accessKey](https://app.remote.it/#/account/accessKey).  \nPlease note: Generation of keys is crypto-random and the secret is only available immediately after creation by clicking the “Show secret access key” link or downloading the key as a CSV file (containing the Access Key ID and Secret Access Key)  \nYou are limited to 2 active access keys. The account page will also show when the key was created and last used for authentication. If you suspect your key has been compromised, generate a new one, replace it in your code and disable it. If desired you can delete the compromised key after disabling it.  \nIn addition, if you will be using the REST-API you will also need to retrieve your Developer API Key. This can also be found in the Account section of the web portal.\n\n### Authentication error response\n\nIf an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.\n\n## Integration\n\nIf you want to start using the API requests in your code, you cannot use the generated code out of any tool as the generated signature is only good for that specific request. You will need to use the http request signing methodology. Some examples can be found on the [authentication page](https://docs.remote.it/developer-tools/authentication#examples).\n\n### **Schema Definitions**\n\nGraphQL endpoint supports introspection queries via the __schema query**.** There is also a visual version of the schema available at [https://api.remote.it/v1/graphql/doc](https://api.remote.it/v1/graphql/doc)\n\n#### We recommend using a GraphQL client (Developer Tools) to introspect and explore the schema.\n\nConfigure your GraphQL client to use the API endpoint:\n\n`https://api.remote.it/graphql/v1`\n\nSchema convention is to use upper camel case for object types and lower camel case for property names.\n\nNote that these objects and parameters are continually enhanced. Please use your IDE for the most up to date schema. The changes are designed to be non-breaking by adding rather than deleting or changing existing definitions.\n\nBasic types are:\n\n- ID (similar to the string type but used for object IDs)\n    \n- String\n    \n- Int\n    \n- Float\n    \n- Boolean\n    \n- DateTime (ISO 8601 format Date String)\n    \n\n## Queries\n\nQueries are requests which read the data and will not change the data. All queries will be in context of the user associated with the access key and secret. The usage examples include a variable section which will need to accompany the query or alternatively, you can put the values inline.\n\n### Fetching Updates\n\nIf you're working on building an application which display data and you want the status information to update (near) realtime, use the [webhook](https://docs.remote.it/developer-tools/webhooks). To prevent excessive usage of our API, we recommend that you be mindful about your implementation.\n\n**Do's:**\n\n- Register a programmatic [webhook](https://docs.remote.it/developer-tools/webhooks) and get updates for status changes on your devices. When you detect changes, update the device information\n    \n\n**Dont's:**\n\n- Poll updates for each device. There should never be a reason to do this, unless in small cases and your application might get rate limited. See above tactics to implement this better.\n    \n\n## Mutations\n\nMutations are requests which update data. All mutations are in context of the user associated with the access key and secret.\n\nIn the case where we do not have the functionality supported, the REST-API examples are provided. These will be updated from time to time as remote.it migrates to support graphQL only.\n\n## Pagination\n\nThe list responses from the devices and event log queries return paginated results. We implement a pagination model with `from`/`after` and `size` pagination arguments. Responses can return `hasMore`, `last` and `total` . If the `hasMore` response returns true, this indicates do another fetch. In this case, the `from` will increment to 1001 to fetch the next set. You could also determine this by iteration until you get to the `total`. Size is limited to 1000 max in each return.\n\n### **Need some help?**\n\nUse our community at forum.remote.it",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "5451357",
		"_collection_link": "https://www.postman.com/remoteit/workspace/remote-it-graphql/collection/5451357-e39d66ec-18ea-4a61-b8fa-3c19f5650981?action=share&source=collection_link&creator=5451357"
	},
	"item": [
		{
			"name": "Scripting",
			"item": [
				{
					"name": "Upload File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "multipart/form-data"
							},
							{
								"key": "User-Agent",
								"value": "insomnia/8.5.1"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "filename.sh",
									"type": "file",
									"src": "/Users/bstrech/Desktop/Get-Device-Status (1).sh"
								},
								{
									"key": "executable",
									"value": "true"
								},
								{
									"key": "shortDesc",
									"value": "Update Status Columns of Device"
								},
								{
									"key": "longDesc",
									"value": "Updates Device Status Columns with some information about the device"
								}
							]
						},
						"url": "{{_.base_url }}/file/upload"
					},
					"response": []
				},
				{
					"name": "Query: Get List of Files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetFiles {\nlogin {\n# Add the following line if you need to do this in Org context.\n# The ID is the Org ID\n  #account(id:\"XXXXXX-XXXX-XXXXXX-XXXXX\") {\n  files {\n    owner {\n      email\n      id\n    }\n    id\n    name \n    shortDesc\n    longDesc\n    executable\n    created\n    updated\n    versions {\n      id\n      created\n      version\n      arguments {\n        name\n        order\n        options\n        argumentType\n      }\n    }\n    lastVersion {\n      id\n      created\n      version\n      arguments {\n        name\n        order\n        options\n        argumentType                \n      }\n    }\n  }\n  #} end of org context\n}\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Delete File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteFile {\n  deleteFile(fileId: \"881189d3-59b8-48d7-84fe-3199bdfbc40a\")\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Delete File Version",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation deleteFileVersion {\n  deleteFileVersion(fileVersionId: \"d3449672-74e6-4745-8c25-2ffd79e6be36\")\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Start a Scripting Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation execute {\n  startJob(\n    fileId: \"881189d3-59b8-48d7-84fe-3199bdfbc40a\",\n    #Device IDs OR Tags are used to identify the devices for the job. If both device IDs and tags are passed, device Ids will be used.\n    deviceIds: [\"80:00:00:00:01:22:37:AE\"],\n    #optional device tags (can be used to run a group of scripts against a set of devices with these tags at time of execution)\n\t\t#ANY/ALL (i.e. or/and), when tags are used, operator should accompany\n    tagFilter: {operator: ANY, values:[\"reboot\"]},\n    arguments: [\n      {\n        name: \"url\"\n        value: \"https://remote.it\"\n      },\n      {\n        name: \"imageFile\"\n        value: \"3f5f04d4-23f4-4cd8-a9ba-70814952dff7\"\n      },\n      {\n        name: \"bookmarkName\"\n        value: \"RemoteIt\"\n      },\n      {\n        name: \"action\"\n        value: \"Add\"\n      }\n    ]\n  )\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Cancel a Scripting Job",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Cancel Job requires the job ID and will cancel the job that is in progress but cannot revert any scripts that have already executed. Any currently executing script will no longer update the Remote.It backend for updating attributes or legacy task notifier, but the script will finish running. Any scripts not yet received by devices will be cancelled.\nmutation cancelJob {\n  cancelJob(jobId: \"41fc0cec-4efd-40ef-8e48-1aa109019f1c\")\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Scripting Jobs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "query GetJobs {\n   login {\n     # Add the following line if you need to do this in Org context.\n     # The ID is the Org ID\n     #account(id:\"XXXXXX-XXXX-XXXXXX-XXXXX\") {\n     #see documentation on paginated responses for iteration\n     #examples of filtering below\n      jobs(ids: [\"41fc0cec-4efd-40ef-8e48-1aa109019f1c\",\"41fc0cec-4efd-40ef-8e48-xxxxx\"], statuses:[FAILED,WAITING,RUNNING,SUCCESS,CANCELLED],size: 1000)\n      {\n\t\t\t\thasMore\n\t\t\t\ttotal\n\t\t\t\tlast\n\t\t\t\titems {\n\t\t\t\t\tid\n        \towner {\n          \temail\n        \t}\n\t\t\t\t\tuser {\n\t   \t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t\tcreated\n\t\t\t\t\tupdated\n\t\t\t\t\t# One of the following FAILED,WAITING,RUNNING,SUCCESS,CANCELLED\n\t\t\t\t\tstatus\n\t\t\t\t\t#tags associated with job\n\t\t\t\t\ttags {\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\t#ANY/ALL (i.e. or/and)\n\t\t\t\t\ttagOperator,\n\t\t\t\t\tfileVersion {\n\t   \t\t\t\tid\n\t\t\t\t\t\tfile {\n\t\t\t\t\t\t\tname\n\t\t\t\t \t  }\n\t\t\t\t\t}\n\t\t\t\t\tjobDevices {\n\t    \t\t\tid\n\t    \t\t\tdevice {\n\t\t\t\t\t\t\tid\n\t    \t\t\t}\n\t\t\t\t\t\t#attributes associated with the job.\n\t\t\t\t\t\tattributes {\n\t\t\t\t\t\t\t created\n\t\t\t\t\t\t\t id\n\t\t\t\t\t\t\t key\n\t\t\t\t\t\t\t value\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#one of the following: FAILED,WAITING,RUNNING,SUCCESS,CANCELLED\n\t\t\t\t\t\tstatus\n\t\t\t\t\t}\n\t\t\t\t\targuments {\n\t    \t\t\tid\n\t    \t\t\tfileArgument {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t\tdesc\n\t\t\t\t\t\t\torder\n\t\t\t\t\t\t\toptions\n\t\t\t\t\t\t\targumentType\n\t\t\t\t\t\t\tcreated\n\t    \t\t\t}\n\t\t\t\t\tname\n\t\t\t\t\tdesc\n\t\t\t\t\torder\n\t\t\t\t\targumentType\n\t\t\t\t\tvalue\n        }\n      }\n    }\n  }\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Organizations",
			"item": [
				{
					"name": "Query: Get Organization As Owner of Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Query the organization and its members\n#Returns ID that can be used in subsequent queries\n#and each members role\n\nquery {\n\tlogin {\n\t\torganization {\n\t\t\t# this is your organization, not any that your belong to as a member\n\t\t\tid\n\t\t\tname\n\t\t\tcreated\n\t\t\troles {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tpermissions\n\t\t\t}\n\t\t\tmembers {\n\t\t\t\tuser {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t\tcustomRole {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Organization As Member Of Organization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Retrieves all organizations and roles a user is a member of\n\nquery {\n\tlogin {\n\t\tmembership {\n\t\t\t# This is your role and permissions\n\t\t\tcustomRole {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tpermissions\n\t\t\t}\n\t\t\torganization {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taccount {\n\t\t\t\t\tid\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t\tcreated\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Remove Member from Org",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# The access key token must belong to a user with appropriate permissions. The user must either be the owner OR have a custom role with the administer (manage organization user) permission. \n\n\n# accountId is the org id.\n\nmutation {\n\tremoveMember(\n\t\taccountId: \"XX:XX\"\n\t\temail: \"email@example.com\"\n\t)\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Add or Change Org Member",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# The access key token must belong to a user with appropriate permissions. The user must either be the owner OR have a custom role with the administer (manage organization user) permission. \n\n\n# accountId is the org id.\n#\n# role can be either MEMBER or ADMIN\n# roleId is the customRole ID\n\nmutation {\n\tsetMember(\n\t\taccountId: \"XX:XX\"\n\t\temail: [\"email@example.com\"]\n\t\t# Do not use role and roleId together.\n\t\t# role can be used when there are no custom roles. Values are MEMBER or ADMIN\n\t\trole: MEMBER\n\t\t# roleId is used when it is a custom role. See Query: Get Organization As Owner of Organization for fetching roles. Note if you are not the organization owner, you will need to combine it with Query: Organization General Query Example.\n\t\troleId: 225\n\t)\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Organization General Query Example",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Use this example as a template for modifying the other examples. You will need to have the appropriate permissions for the requested information. \n# At this moment mutations must be done as the owner of the organization unless specified here or in the schema documentation.\n\nquery {\n\tlogin {\n\t\t#account ID is the organization id. \n\t\taccount(id: \"xx:xx\") {\n\t\t\t#rest of the query for example...\n\t\t\tdevices (size:1000, from:0) {\n\t\t\t\thasMore\n\t\t\t\titems {\n\t\t\t\t\tid\n\t\t\t\t}\n\t\t\t}\n\t\t\t#end of nested part of the query.\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Organization Get Devices and Services with Shares",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the list of devices limited to the first 1000\n#hasMore - if there are more devices in the account than requested\n#total - total number of devices based on query filter and account\n# Iteration should be used if hasMore is true and then increment the from to the next set. For example if the first query is size 1000 and hasMore is true, then the next query should set from to 1001.\n#Retrieves details of each devices such as\n# id, name and access. Access sharing at the device level indicates that at least one service is shared. Scripting indicates that they have scripting access in legacy portal. \n# Services lists the individual services of the device. with the id, name and access to the individual service.\n# Sharing can be removed via Mutation: Remove Device Share. You will need the user email, device ID or the individual service you want to remove sharing. If you pass device ID in remove, it will remove all sharing for that user including scripting.\n\nquery {\n\tlogin {\n\t\t#account ID is the organization id. You will need to have the appropriate permissions for the requested information.\n\t\taccount(id: \"xxxx-xxxx\") {\n\t\t\tdevices (size:1000, from:0) {\n\t\t\t\thasMore\n\t\t\t\ttotal\n\t\t\t\titems {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\taccess {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\temail\n\t\t\t\t\t\t}\n\t\t\t\t\t\tscripting\n\t\t\t\t\t}\n\t\t\t\t\t# omit this node if do not need the individual service information\n\t\t\t\t\tservices {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\taccess {\n\t\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\t\temail\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Organization Get Devices and Services with Shares",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the list of devices limited to the first 1000\n#hasMore - if there are more devices in the account than requested\n#total - total number of devices based on query filter and account\n# Iteration should be used if hasMore is true and then increment the from to the next set. For example if the first query is size 1000 and hasMore is true, then the next query should set from to 1001.\n#Retrieves details of each devices such as\n# id, name and access. Access sharing at the device level indicates that at least one service is shared. Scripting indicates that they have scripting access in legacy portal. \n# Services lists the individual services of the device. with the id, name and access to the individual service.\n# Sharing can be removed via Mutation: Remove Device Share. You will need the user email, device ID or the individual service you want to remove sharing. If you pass device ID in remove, it will remove all sharing for that user including scripting.\n\nquery {\n\tlogin {\n\t\t#account ID is the organization id. You will need to have the appropriate permissions for the requested information.\n\t\taccount(id: \"935C32DA-FD80-46DA-986E-50AA9FAB1BFB\") {\n\t\t\tfiles {\n\t\t\t\tname\n\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Device and Shares",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Device and share mutations can just be executed without the org context since a device/service id is associated with a specific account. See mutations in other sections.\n# The access key token must belong to a user with appropriate permissions. For example a user with only member priviledges will not be able to change sharing or update a device. \n\n\n# Example: Mutation to remove a share of device and all services where deviceId is the device ID. If a specific service is to be removed, use the service ID. This is not org membership, but individual sharing.\n\nmutation {\n\tshare(\n\t\tdeviceId: \"80:00:00:00:12:34:56:78\"\n\t\temail: \"email@example.com\"\n\t\tnotify: true\n\t\taction: REMOVE\n\t)\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Account",
			"item": [
				{
					"name": "Query: Get Account ID of User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Query the organization and its members\n#Returns ID that can be used in subsequent queries\n#and each members role\n\nquery {\n\tlogin {\n\t\taccount {\n\t\t\tid\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Retrieve Access Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#For API Authentication:\n#only the Key is returned.\n#Secret is only retrievable once upon creation\n\nquery {\n\tlogin {\n\t\taccessKeys {\n\t\t\tcreated\n\t\t\tenabled\n\t\t\tkey\n\t\t\tlastUsed\n\t\t\t__typename\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Application Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#List of supported application types and their default port for\n#for service creation\n\nquery {\n\tapplicationTypes {\n\t\tid\n\t\tname\n\t\tdescription\n\t\tport\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Retrieve Notification Settings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the current notification settings on users account\n#Notifications are used to deliver device and service online/offline events\n\nquery {\n\tlogin {\n\t\tnotificationSettings {\n\t\t\temailNotifications\n\t\t\tdesktopNotifications\n\t\t\turlNotifications\n\t\t\tnotificationEmail\n\t\t\tnotificationUrl\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Create New Access Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Access keys are used to authenticate you with our API.\n#You can create a new key or delete an existing key at any time.\n#You can also temporarily disable a key.\n#If you lose or forget your secret key, you cannot retrieve it.\n#There is a limit of #2 access keys.\n#No variables are required to be passed in\n\nmutation {\n\tcreateAccessKey {\n\t\tkey\n\t\tsecret\n\t\t__typename\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Enable/Disable Access Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Access keys are used to authenticate you with our API.\n#You can enable or disable keys at any time.\n\n#This example shows how to provide operation names for mutations\n#and pass in query variables\n\nmutation changeAccessKey($key: String!, $enable: Boolean!) {\n\tupdateAccessKey(key: $key, enabled: $enable) {\n\t\tcreated\n\t\tkey\n\t\tenabled\n\t\tlastUsed\n\t}\n}\n",
								"variables": "{\"key\":\"2873\",\"enable\":true}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Delete Access Keys",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Access keys are used to authenticate you with our API.\n#You can create a new key or delete an existing key at any time.\n\n#You must pass the key to delete from the account\n#Keys are not recoverable once deleted\n\nmutation {\n\tdeleteAccessKey(key: \"\")\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Custom Attributes and Tagging",
			"item": [
				{
					"name": "Query: Get User, Device, Service Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Returns any custom attributes added to the User, Device or Service\n\nquery {\n\tlogin {\n\t\tattributes\n\t\tdevices {\n\t\t\thasMore\n\t\t\ttotal\n\t\t\titems {\n\t\t\t\tattributes\n\t\t\t\tservices {\n\t\t\t\t\tattributes\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Set Single Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This mutation sets a custom attribute of given value to\n#a User, Device or Service. \n#User is ID in {login{account{id}}}\n\n\nmutation {\n  setAttribute(\n    name: \"CustomAttribute\",\n    value: \"ValueOfAttribute\",\n    serviceId: \"2AEA1ECC-0E684D40\"\n  )\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Set Remote.it Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This mutation updates the category A on a Device.\n#Attributes can be applied to User, Device or Service.\n\nmutation {\n\tsetAttribute(\n\t\tname: \"$remoteit.categoryA\"\n\t\tvalue: \"my category A value\"\n\t\tserviceId: \"80:00:00:00:12:34:56:78\"\n\t)\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Set Multiple Attributes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This example passes in a json formatted object to a \n#custom fuction name to set any number of attributes\n\nmutation UpdateMultipleAttributes($attributes: Object!, $serviceId: String!) {\n\tsetAttributes(attributes: $attributes, serviceId: $serviceId)\n}\n",
								"variables": "{\"attributes\":{\"$remoteit\":{\"categoryA\":\"Uptime: 1h, 06m\",\"categoryB\":\"Version: 1.0\",\"categoryC\":\"Serial Number: x292jsu2\",\"categoryD\":\"MAC: AUWS83729A\"}},\"serviceId\":\"80:00:00:00:01:12:12:12\"}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Remove Single Attribute",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#to delete tags you must set the value to null\n\nmutation {\n\tsetAttribute(\n\t\tname: \"CustomAttribute\"\n\t\tvalue: null\n\t\tserviceId: \"80:00:00:00:12:34:56:78\"\n\t)\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get All Tags For Own Account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#List of tags owned by the user or Organization making query\nquery {\n\tlogin {\n\t\ttags {\n\t\t\tname\n\t\t\tcolor\n\t\t\tcreated\n\t\t}\n\t}\n}\n\n# \tList of available colors\n# \t{\n#     id: 1,\n#     name: 'Gray',\n#     color: '#797c86',\n#   },\n#   {\n#     id: 2,\n#     name: 'Red',\n#     color: '#E65B4C',\n#   },\n#   {\n#     id: 3,\n#     name: 'Orange',\n#     color: '#EF922E',\n#   },\n#   {\n#     id: 4,\n#     name: 'Yellow',\n#     color: '#F5CC17',\n#   },\n#   {\n#     id: 5,\n#     name: 'Lime',\n#     color: '#BBD40F',\n#   },\n#   {\n#     id: 6,\n#     name: 'Green',\n#     color: '#61C951',\n#   },\n#   {\n#     id: 7,\n#     name: 'Teal',\n#     color: '#31C49E',\n#   },\n#   {\n#     id: 8,\n#     name: 'Sky',\n#     color: '#4AB8F4',\n#   },\n#   {\n#     id: 9,\n#     name: 'Blue',\n#     color: '#6193FE',\n#   },\n#   {\n#     id: 10,\n#     name: 'Violet',\n#     color: '#6F54CC',\n#   },\n#   {\n#     id: 11,\n#     name: 'Purple',\n#     color: '#8F4EBA',\n#   },\n#   {\n#     id: 12,\n#     name: 'Berry',\n#     color: '#C236AB',\n#   },\n#   {\n#     id: 13,\n#     name: 'Pink',\n#     color: '#E13F88',\n#   }"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Create Tag w/Color",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Create a tag with color that can be assigned to devices and custom roles\n\nmutation {\n\tsetTag(tag: { name: \"example\", color: 2 })\n}\n\n# \tList of available colors\n# \t{\n#     id: 1,\n#     name: 'Gray',\n#     color: '#797c86',\n#   },\n#   {\n#     id: 2,\n#     name: 'Red',\n#     color: '#E65B4C',\n#   },\n#   {\n#     id: 3,\n#     name: 'Orange',\n#     color: '#EF922E',\n#   },\n#   {\n#     id: 4,\n#     name: 'Yellow',\n#     color: '#F5CC17',\n#   },\n#   {\n#     id: 5,\n#     name: 'Lime',\n#     color: '#BBD40F',\n#   },\n#   {\n#     id: 6,\n#     name: 'Green',\n#     color: '#61C951',\n#   },\n#   {\n#     id: 7,\n#     name: 'Teal',\n#     color: '#31C49E',\n#   },\n#   {\n#     id: 8,\n#     name: 'Sky',\n#     color: '#4AB8F4',\n#   },\n#   {\n#     id: 9,\n#     name: 'Blue',\n#     color: '#6193FE',\n#   },\n#   {\n#     id: 10,\n#     name: 'Violet',\n#     color: '#6F54CC',\n#   },\n#   {\n#     id: 11,\n#     name: 'Purple',\n#     color: '#8F4EBA',\n#   },\n#   {\n#     id: 12,\n#     name: 'Berry',\n#     color: '#C236AB',\n#   },\n#   {\n#     id: 13,\n#     name: 'Pink',\n#     color: '#E13F88',\n#   }\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Add Tag to Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#To add a tag by name to a given device.\n#You can add existing or new tags with this mutation\n#Use Get Devices to retrieve the ID for serviceID field.\n\nmutation {\n\taddTag(name: \"\", serviceId: \"\")\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Add Multiple Tags to Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#To add multiple tags by name to a list of devices.\n#You can add existing or new tags with this mutation\n#Use Get Devices to retrieve the ID for serviceID field.\n\nmutation {\n\taddTag(\n\t\tname: [\"hello\", \"world\"]\n\t\tserviceId: [\"80:00:01:01:01:00:01:01\", \"80:00:01:01:01:00:01:02\"]\n\t)\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Delete Tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#To remove multiple tags by name.\n#If the tags are associated with devices or custom roles they will be removed.\n\nmutation {\n\tdeleteTag(name: [\"staging\", \"production\", \"qa\"])\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Connections",
			"item": [
				{
					"name": "Query: Get Active Sessions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This query shows all the active connection sessions including\n#when, where, who and what devices they are connected to\n\nquery {\n\tlogin {\n\t\tsessions {\n\t\t\tid\n\t\t\ttimestamp\n\t\t\tendpoint {\n\t\t\t\tproxy\n\t\t\t\tgeo {\n\t\t\t\t\tcountryName\n\t\t\t\t}\n\t\t\t}\n\t\t\tuser {\n\t\t\t\temail\n\t\t\t}\n\t\t\ttarget {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tport\n\t\t\t\tapplication\n\t\t\t\tdevice {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Generate Proxy Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Proxy connections can be generated to individual services and the unique\n#address will be provided in the host and port fields.\n#\n#hostIP values could contain\n#\n#0.0.0.0 for fully public connections available to user\n#\n#255.255.255.255 to allow only the first accessing IP to \"Latch\" the connection.\n#Blocking all others\n#\n#A unique public IP address to only allow that IP to access the connection\n\nmutation GetConnection($serviceId: String!, $hostIP: String!) {\n\tconnect(serviceId: $serviceId, hostIP: $hostIP) {\n\t\tid\n\t\tcreated\n\t\thost\n\t\tport\n\t\treverseProxy\n\t\ttimeout\n\t}\n}\n",
								"variables": "{\"serviceId\":\"80:00:00:12:34:56:78:90\",\"hostIP\":\"255.255.255.255\"}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Close Proxy Connection",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Used to disconnect any active proxy connection\n\nmutation Disconnect($serviceId: String!, $connectionId: String!) {\n\tdisconnect(serviceId: $serviceId, connectionId: $connectionId)\n}\n",
								"variables": "{\"serviceId\":\"80:00:00:12:34:56:78:90\",\"connectionId\":\"123ddfff-6432-49d0-6432-205d49d08454\"}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Devices & Public URLs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Will only return paginated devices and services, but only services with a public url will have a link\n\nquery {\n\tlogin {\n\t\tdevices(size: 1000, ) {\n\t\t\ttotal\n\t\t\thasMore\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname \n\t\t\t\tservices {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\tlink {\n\t\t\t\t\t\turl\n\t\t\t\t\t\tenabled\n\t\t\t\t\t\tpassword\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": ""
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Set Public URL Connectionn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Required Options include\n# serviceID, enabled,  \n# options: password: string, allow: array of CIDRs, deny: array of CIDRs\n\nmutation SetPublicURL($serviceId: String!, $isEnabled: Boolean!) {\n\tsetConnectLink(serviceId: $serviceId, enabled: $isEnabled) {\n\t\turl\n\t\tpassword\n\t\tenabled\n}\n}\n",
								"variables": "{\"serviceId\": \"90:00:00:00:00:08:AE:1C\",\"isEnabled\": true}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Delete Public URL Connectionn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Required Options include\n# serviceID\n# Use this when you intend to destroy the public url and not just disable it. If you want to temporarily disable it, or update it to add or remove a password, use the Mutation: Set Public URL Connection\n\nmutation RemovePublicURL($serviceId: String!) {\n\tremoveConnectLink(serviceId: $serviceId)\n}\n",
								"variables": "\"{\\n\\t\\\"serviceId\\\": \\\"80:00:00:12:34:56:78:90\\\"\\n}\""
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Events, Activity Feed, Logging",
			"item": [
				{
					"name": "Query: Get Event Logs",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This query returns logs for all devices and a list of device events\n#How far logs can be retrieved is determined by your subscription level\n\nquery getEvents(\n\t$size: Int\n\t$from: Int\n\t$minDate: DateTime\n\t$maxDate: DateTime\n\t$types: [EventType!]\n) {\n\tlogin {\n\t\tevents(\n\t\t\tsize: $size\n\t\t\tfrom: $from\n\t\t\tminDate: $minDate\n\t\t\tmaxDate: $maxDate\n\t\t\ttypes: $types\n\t\t) {\n\t\t\thasMore\n\t\t\ttotal\n\t\t\titems {\n\t\t\t\ttype\n\t\t\t\towner {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t\tactor {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t\ttarget {\n\t\t\t\t\tcreated\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tusers {\n\t\t\t\t\temail\n\t\t\t\t}\n\t\t\t\ttimestamp\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\"size\":1000,\"from\":0,\"minDate\":\"2021-06-01\",\"maxDate\":\"2021-07-01\",\"types\":[\"DEVICE_CONNECT\"]}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Connection History with User Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This query returns logs for all connect events based on your permission level.\n#How far logs can be retrieved is determined by your subscription level\n\nquery getEvents(\n\t$size: Int\n\t$from: Int\n\t$minDate: DateTime\n\t$maxDate: DateTime\n\t$types: [EventType!]\n) {\n\tlogin {\n\t\tevents(\n\t\t\tsize: $size\n\t\t\tfrom: $from\n\t\t\tminDate: $minDate\n\t\t\tmaxDate: $maxDate\n\t\t\ttypes: $types\n\t\t) {\n\t\t\thasMore\n\t\t\ttotal\n\t\t\titems {\n\t\t\t\t... on DeviceConnectEvent \t\t\t{\n\t\t\t\t\tactor {\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t\t#source info is the connecting person. If they are using the web interface and not the desktop, this will be the proxy server information\n\t\t\t\t\tsourceAddress\n\t\t\t\t\tsourceType\n\t\t\t\t\tsourceGeo {\n\t\t\t\t\t\tconnectionType\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttarget {\n\t\t\t\t\tcreated\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\ttimestamp\n\t\t\t}\n\t\t}\n\t}\n}\n",
								"variables": "{\"size\":1000,\"from\":0,\"minDate\":\"2022-06-01\",\"maxDate\":\"2022-07-31\",\"types\":[\"DEVICE_CONNECT\"]}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Events as CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This query returns a url to download logs for\n#all devices and a list of device events\n#How far logs can be retrieved is determined by your subscription level\n\n{\n\tlogin {\n\t\teventsUrl(\n\t\t\tminDate: \"2022-01-01\"\n\t\t\tmaxDate: \"2022-02-01\"\n\t\t\ttypes: [DEVICE_CONNECT]\n\t\t)\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Events For Specific Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This query returns logs for a given list of devices and a list of device events\n#How far logs can be retrieved is determined by your subscription level\n\nquery getEvents(\n\t$deviceID: [String!]!\n\t$minDate: DateTime\n\t$maxDate: DateTime\n\t$types: [EventType!]\n) {\n\tlogin {\n\t\tdevice(id: $deviceID) {\n\t\t\tevents(minDate: $minDate, maxDate: $maxDate, types: $types) {\n\t\t\t\thasMore\n\t\t\t\ttotal\n\t\t\t\titems {\n\t\t\t\t\tstate\n\t\t\t\t\ttimestamp\n\t\t\t\t\ttarget {\n\t\t\t\t\t\tname\n\t\t\t\t\t\tid\n\t\t\t\t\t}\n\t\t\t\t\t... on DeviceStateEvent {\n\t\t\t\t\t\texternalAddress\n\t\t\t\t\t\tgeo {\n\t\t\t\t\t\t\tconnectionType\n\t\t\t\t\t\t\tisp\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n#variables\n",
								"variables": "{\"deviceID\":[\"80:XX:00:00:01:02:03:04\"],\"minDate\":\"2021-06-01\",\"maxDate\":\"2021-07-01\",\"types\":[\"DEVICE_STATE\"]}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Events For Specific Device as CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This query returns a url for downloading logs for a\n#given list of devices and a list of device events\n#How far logs can be retrieved is determined by your subscription level\n\nquery getEventsUrl(\n\t$deviceID: [String!]!\n\t$minDate: DateTime\n\t$maxDate: DateTime\n\t$types: [EventType!]\n) {\n\tlogin {\n\t\tdevice(id: $deviceID) {\n\t\t\teventsUrl(minDate: $minDate, maxDate: $maxDate, types: $types)\n\t\t}\n\t}\n}\n",
								"variables": "{\"deviceID\":[\"80:XX:00:00:01:02:03:04\"],\"minDate\":\"2021-06-01\",\"maxDate\":\"2021-07-01\",\"types\":[\"DEVICE_STATE\"]}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Activity Feed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "{\n\tlogin {\n\t\tfeed(start: \"2022-04-01T00:00:00.000Z\", end: \"2022-04-14T23:59:59.000Z\") {\n\t\t\tstart\n\t\t\tend\n\t\t\tduration\n\t\t\titems {\n\t\t\t\t__typename\n\t\t\t\tstart\n\t\t\t\tend\n\t\t\t\tduration\n\t\t\t\t... on DeviceOfflineItem {\n\t\t\t\t\tdevice {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t}\n\t\t\t\t\tintervals {\n\t\t\t\t\t\tstart\n\t\t\t\t\t\tend\n\t\t\t\t\t\tduration\n\t\t\t\t\t\toffline {\n\t\t\t\t\t\t\texternalAddress\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonline {\n\t\t\t\t\t\t\texternalAddress\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on UserLoginItem {\n\t\t\t\t\tuser {\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t\tevents {\n\t\t\t\t\t\ttimestamp\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t... on UserConnectionItem {\n\t\t\t\t\tuser {\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t\tservice {\n\t\t\t\t\t\tid\n\t\t\t\t\t\tname\n\t\t\t\t\t\ttitle\n\t\t\t\t\t\tdevice {\n\t\t\t\t\t\t\tid\n\t\t\t\t\t\t\tname\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t# each conection interval if listed below\n\t\t\t\t\tintervals {\n\t\t\t\t\t\t# start of the connection (or period start)\n\t\t\t\t\t\tstart\n\t\t\t\t\t\t# end of the connection (or period end)\n\t\t\t\t\t\tend\n\t\t\t\t\t\t# duration of the connection\n\t\t\t\t\t\tduration\n\t\t\t\t\t\t# the connect and disconnect events can be further queried\n\t\t\t\t\t\tconnect {\n\t\t\t\t\t\t\tproxy\n\t\t\t\t\t\t\tsourceAddress\n\t\t\t\t\t\t\tsourceGeo {\n\t\t\t\t\t\t\t\tstate\n\t\t\t\t\t\t\t\tcity\n\t\t\t\t\t\t\t\tcountry\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				}
			]
		},
		{
			"name": "Devices and Services",
			"item": [
				{
					"name": "Query: Get Application Types",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Gets the list of Application Types, alternatively know as Service types which can be used it mutations to add services or update services. See https://link.remote.it/docs/api/application-types for further explanation of the properties\n\nquery {\n  applicationTypes {\n   id\n   name\n   description\n   port\n   protocol\n   proxy\n  }\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the list of devices limited to the first 1000\n#hasMore - if there are more devices in the account than requested\n#total - total number of devices based on query filter and account\n#Retrieves details of each devices such as\n#id, online/offline state, lastReported Date\n#which users have accounts\n#tags and attributes associated with each device\n\nquery {\n\tlogin {\n\t\tdevices (size:1000, from:0) {\n\t\t\thasMore\n\t\t\ttotal\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tstate\n\t\t\t\tlastReported\n\t\t\t\taccess {\n\t\t\t\t\tuser {\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttags {\n\t\t\t\t\tname\n\t\t\t\t}\n\t\t\t\tattributes\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Device List CSV",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the csv download link for device list.\n# if you need your organization's list, use the account section\n\n\nquery {\n\tlogin {\n\t\t#account(id:\"XXXXX\"){\n\t\t #set services false if you only want the devices and not all of services \n\t   report(name:\"DeviceList\",parameters:{services: false})\n\t\t#title=Service Type\n\t\t#timestamp= Last Reported\n\t\t#}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Devices and Services with Shares",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the list of devices limited to the first 1000\n#hasMore - if there are more devices in the account than requested\n#total - total number of devices based on query filter and account\n# Iteration should be used if hasMore is true and then increment the from to the next set. For example if the first query is size 1000 and hasMore is true, then the next query should set from to 1001.\n#Retrieves details of each devices such as\n# id, name and access. Access sharing at the device level indicates that at least one service is shared. Scripting indicates that they have scripting access in legacy portal. \n# Services lists the individual services of the device. with the id, name and access to the individual service.\n# Sharing can be removed via Mutation: Remove Device Share. You will need the user email, device ID or the individual service you want to remove sharing. If you pass device ID in remove, it will remove all sharing for that user including scripting.\n\nquery {\n\tlogin {\n\t\tdevices (size:1000, from:0) {\n\t\t\thasMore\n\t\t\ttotal\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\taccess {\n\t\t\t\t\tuser {\n\t\t\t\t\t\temail\n\t\t\t\t\t}\n\t\t\t\t\tscripting\n\t\t\t\t}\n\t\t\t\t# omit this node if do not need the individual service information\n\t\t\t\tservices {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\taccess {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\temail\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Filtered Devices",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the list of devices limited to the size argument\n#hasMore - if there are more devices in the filtered list than requested\n#total - total number of devices based on query filter and account\n#Retrieves details of each devices such as\n#id, online/offline state, lastReported Date\n#Status and Category Fields\n\nquery {\n\tlogin {\n\t\tdevices(size: 10, sort: \"-created\", from: 0, name: \"pi\") {\n\t\t\thasMore\n\t\t\ttotal\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tstate\n\t\t\t\tlastReported\n\t\t\t\tcategoryA\n\t\t\t\tstatusA\n\t\t\t\tcategoryB\n\t\t\t\tstatusB\n\t\t\t\tcategoryC\n\t\t\t\tstatusC\n\t\t\t\tcategoryD\n\t\t\t\tstatusD\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Devices and Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Gets the list of devices and their services limited to the size argument\n#hasMore - if there are more devices in the filtered list than requested\n#total - total number of devices based on query filter and account\n#Retrieves details of each devices such as\n#id, online/offline state, lastReported Date\n#Each service under the device and you can filter on multiple arguments\n#This example finds all ssh \"applicationType:28\" services under each device with \"pi\" in the device name\n\nquery {\n\tlogin {\n\t\tdevices(size: 10, sort: \"-created\", from: 0, name: \"pi\") {\n\t\t\thasMore\n\t\t\ttotal\n\t\t\titems {\n\t\t\t\tid\n\t\t\t\tname\n\t\t\t\tstate\n\t\t\t\tlastReported\n\t\t\t\tservices(application: 28) {\n\t\t\t\t\tid\n\t\t\t\t\tname\n\t\t\t\t\thost\n\t\t\t\t\tenabled\n\t\t\t\t\tport\n\t\t\t\t\tstate\n\t\t\t\t\tsessions {\n\t\t\t\t\t\tuser {\n\t\t\t\t\t\t\temail\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttimestamp\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Query: Get Endpoints",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Another method of returning devices and services\n#Every Device and Service is considered an endpoint\n#Endpoints contain additional meta data\n#including % of device being online and available\n#its calculated geo location\n#version of the remoteit deamon running \n\n{\n\tlogin {\n\t\tendpoints {\n\t\t\tid\n\t\t\tname\n\t\t\tavailability\n\t\t\tstate\n\t\t\tgeo {\n\t\t\t\tcountryName\n\t\t\t\tstateName\n\t\t\t}\n\t\t\texternalAddress\n\t\t\texpired\n\t\t\tquality\n\t\t\tversion\n\t\t}\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Share Device and All Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Mutation to share a device and all services \n#You can determine whether or not scripting is available to the user separate from services\n\nmutation {\n\tshare(\n\t\tdeviceId: \"80:00:00:00:12:34:56:78\"\n\t\temail: \"email@example.com\"\n\t\tscripting: false\n\t\tnotify: true\n\t\taction: ADD\n\t)\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Remove Device Share ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#Mutation to share a device and all services \n#You can determine whether or not scripting is available to the user separate from services\n\nmutation {\n\tshare(\n\t\tdeviceId: \"80:00:00:00:12:34:56:78\"\n\t\temail: \"email@example.com\"\n\t\tnotify: true\n\t\taction: REMOVE\n\t)\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Leave Shared Device",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This mutation allows you to leave an individual device that has been shared to you\n\nmutation {\n\tshare(\n\t\tdeviceId: \"80:00:00:00:01:02:03:04\"\n\t\temail: \"YourEmail@email.com\"\n\t\taction: LEAVE\n\t)\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Share Device and Limited Services",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#This mutation allows you to modify or share an existing single device share\n#For the given deviceID\n#share to user email\n#Notify the user the device has been shared\n#do not Allow for bulk scripting\n#Allow user to connect to service 80:00:00:00:01:01:05:06\n#Remove service from the previous share event\n\nmutation {\n\tshare(\n\t\tdeviceId: \"80:00:00:00:01:01:01:02\"\n\t\temail: \"UserToShareTo@email.com\"\n\t\tscripting: false\n\t\tnotify: true\n\t\tservices: [\n\t\t\t{ serviceId: \"80:00:00:00:01:01:05:06\", action: ADD }\n\t\t\t{ serviceId: \"80:00:00:00:01:01:04:07\", action: REMOVE }\n\t\t]\n\t)\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Add Device Service ",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "# Mutation to add a service to a device. This only applies to devices with configurable as true. If the device is not configurable, you will need to use either the CLI or Desktop admin on the device to add a service.\n# You will need the appropriate Application Type to complete\n# Application types are service type definitions\n\nmutation {\n\taddService(\n\t\tdeviceId: \"\" #device ID to which this service will be added\n\t\tapplication: 28 #SSH \n\t\tname: \"My SSH\"\n\t\thost: \"127.0.0.1\" #or LAN address\n\t\tport: 22 #port for the service\n\t\tenabled: true #if false the service will not allow connnections until enabled\n\t) {\n\t\tid # Return the ID of new service\n\t}\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Delete Device or Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#You can pass service ID or device ID into this mutation\n#Services will be deleted if they are found\n#Devices will only be deleted if they are offline\n\nmutation{\n\tdeleteDevice(deviceId:\"\")\n}"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				},
				{
					"name": "Mutation: Rename Device or Service",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followRedirects": true,
						"disableUrlEncoding": false,
						"disableCookies": false
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "#You can pass service ID or device ID into this mutation\n#success will be determined by your permissions to the provided ID\n\nmutation {\n\trenameService(name: \"New Name\", serviceId: \"\")\n}\n"
							}
						},
						"url": "{{ _.base_url }}"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"var sdk = require('postman-collection')",
					"",
					"function computeHttpSignature(config, headerHash) {",
					"  let sig = 'Signature keyId=\"${keyId}\",algorithm=\"${algorithm}\",headers=\"${headers}\",signature=\"${signature}\"'",
					"",
					"  // compute sig here",
					"  let signingBase = ''",
					"  config.headers.forEach(function(h){",
					"    if (signingBase !== '') { signingBase += '\\n' }",
					"    signingBase += h.toLowerCase() + \": \" + headerHash[h]",
					"  })",
					"",
					"  const hashf = (function() {",
					"      switch (config.algorithm) {",
					"        case 'hmac-sha1': return CryptoJS.HmacSHA1",
					"        case 'hmac-sha256': return CryptoJS.HmacSHA256",
					"        case 'hmac-sha512': return CryptoJS.HmacSHA512",
					"        default : return null",
					"      }",
					"    }())",
					"",
					"  const hash = hashf(signingBase, config.secretkey)",
					"  const signatureOptions = {",
					"        keyId : config.keyId,",
					"        algorithm: config.algorithm,",
					"        headers: config.headers,",
					"        signature : CryptoJS.enc.Base64.stringify(hash)",
					"      }",
					"",
					"  // build sig string here",
					"  Object.keys(signatureOptions).forEach(function(key) {",
					"    var pattern = \"${\" + key + \"}\",",
					"        value = (typeof signatureOptions[key] != 'string') ? signatureOptions[key].join(' ') : signatureOptions[key]",
					"    sig = sig.replace(pattern, value)",
					"  })",
					"  return sig",
					"}",
					"",
					"function replaceVariables(content) {",
					"    while(content.indexOf('{{') >= 0) {",
					"        const variableName = content.substring(content.indexOf('{{')+2, content.indexOf('}}'))",
					"        const variableValue= pm.environment.get(variableName) || pm.globals.get(variableName)",
					"        content = content.replace('{{'+variableName+'}}', variableValue)",
					"    }",
					"    return content",
					"}",
					"",
					"// Function to get the Content-Type header value or a default",
					"function getContentType() {",
					"    // Try to get the Content-Type header from the request",
					"    let contentType = pm.request.headers.get('Content-Type');",
					"    ",
					"    // If the Content-Type header is not present, set a default value",
					"    if (!contentType) {",
					"        // Set your default content type, e.g., 'application/json' or 'text/plain'",
					"        contentType = 'application/json';",
					"        pm.request.headers.upsert({key: 'Content-Type', value: 'application/json'});",
					"    }",
					"",
					"    return contentType;",
					"}",
					"",
					" console.log('Request')",
					" console.log(pm.request)",
					"",
					"const url = new sdk.Url(replaceVariables(pm.request.url.toString()))",
					"const hostname = url.getHost()",
					"const accessKey = pm.environment.get('R3_ACCESS_KEY_ID') || pm.globals.get('R3_ACCESS_KEY_ID')",
					"const accessKeySecretPreParse = pm.environment.get(\"R3_SECRET_ACCESS_KEY\") || pm.globals.get(\"R3_SECRET_ACCESS_KEY\")",
					"console.log(accessKeySecretPreParse)",
					"const accessKeySecret = CryptoJS.enc.Base64.parse(accessKeySecretPreParse)",
					"console.log(accessKeySecret)",
					"const curDate = new Date().toGMTString()",
					"console.log(curDate)",
					"targetUrl = url.getPathWithQuery()",
					"console.log(targetUrl)",
					"const method = pm.request.method.toLowerCase()",
					"console.log(method)",
					"const contentType = getContentType();",
					"",
					"const headerHash = {",
					"      date : curDate,",
					"      '(request-target)' : method + ' ' + targetUrl,",
					"      'host' : hostname,",
					"      'content-type': contentType,",
					"    }",
					"const config = {",
					"      algorithm : 'hmac-sha256',",
					"      keyId : accessKey,",
					"      secretkey : accessKeySecret,",
					"      headers : [ '(request-target)', 'host','date', 'content-type' ]",
					"    }",
					"const sig = computeHttpSignature(config, headerHash)",
					"",
					"pm.request.headers.add({key: 'Authorization', value: sig})",
					"pm.request.headers.add({key: 'Date', value: curDate})"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}